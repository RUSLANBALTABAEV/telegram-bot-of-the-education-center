from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, async_session
from config.bot_config import ADMIN_ID

my_courses_router = Router()


# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ---
class CourseEditFSM(StatesGroup):
    waiting_for_price = State()
    waiting_for_title = State()
    waiting_for_description = State()


# --- –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö / –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ ---
@my_courses_router.message(Command("mycourses"))
@my_courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def show_my_courses(message: types.Message):
    async with async_session() as session:
        if message.from_user.id == ADMIN_ID:
            # –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∫—É—Ä—Å—ã
            result = await session.execute(select(Course))
            courses = result.scalars().all()
        else:
            # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
            result = await session.execute(
                select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            if not user:
                await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register) –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ (/login).")
                return
            courses = user.courses

    if not courses:
        await message.answer("üì≠ –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìò –í–∞—à–∏ –∫—É—Ä—Å—ã:" if message.from_user.id != ADMIN_ID else "üìò –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.title, callback_data=f"mycourse:{course.id}")]
            for course in courses
        ]
    )
    await message.answer(text, reply_markup=keyboard)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ ---
@my_courses_router.callback_query(F.data.startswith("mycourse:"))
async def my_course_info(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        course = await session.get(Course, course_id)

    if not course:
        await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = (
        f"üìò <b>{course.title}</b>\n\n"
        f"{course.description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±."
    )

    keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_mycourses")]]

    if callback.from_user.id == ADMIN_ID:
        keyboard.insert(
            0,
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title:{course.id}"),
                InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc:{course.id}"),
            ]
        )
        keyboard.insert(
            1,
            [
                InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"edit_price:{course.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delcourse:{course.id}"),
            ]
        )

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )


# --- –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É ---
@my_courses_router.callback_query(F.data == "back_to_mycourses")
async def back_to_my_courses(callback: CallbackQuery):
    async with async_session() as session:
        if callback.from_user.id == ADMIN_ID:
            result = await session.execute(select(Course))
            courses = result.scalars().all()
        else:
            result = await session.execute(
                select(User).options(selectinload(User.courses)).where(User.user_id == callback.from_user.id)
            )
            user = result.scalar_one_or_none()
            courses = user.courses if user else []

    if not courses:
        await callback.message.edit_text("üì≠ –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìò –í–∞—à–∏ –∫—É—Ä—Å—ã:" if callback.from_user.id != ADMIN_ID else "üìò –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.title, callback_data=f"mycourse:{course.id}")]
            for course in courses
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
@my_courses_router.callback_query(F.data.startswith("delcourse:"))
async def delete_course(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        await session.delete(course)
        await session.commit()

    await callback.message.edit_text(f"üóë –ö—É—Ä—Å ¬´{course.title}¬ª —É–¥–∞–ª—ë–Ω!")


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ---
@my_courses_router.callback_query(F.data.startswith("edit_price:"))
async def edit_price(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    await state.update_data(course_id=course_id)
    await state.set_state(CourseEditFSM.waiting_for_price)

    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ):")


@my_courses_router.message(CourseEditFSM.waiting_for_price, F.text.regexp(r"^\d+$"))
async def process_new_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_id = data.get("course_id")
    new_price = int(message.text)

    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        course.price = new_price
        await session.commit()

    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±.")
    await state.clear()


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ---
@my_courses_router.callback_query(F.data.startswith("edit_title:"))
async def edit_title(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    await state.update_data(course_id=course_id)
    await state.set_state(CourseEditFSM.waiting_for_title)

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@my_courses_router.message(CourseEditFSM.waiting_for_title)
async def process_new_title(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_id = data.get("course_id")
    new_title = message.text.strip()

    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        course.title = new_title
        await session.commit()

    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_title}¬ª.")
    await state.clear()


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è ---
@my_courses_router.callback_query(F.data.startswith("edit_desc:"))
async def edit_desc(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    await state.update_data(course_id=course_id)
    await state.set_state(CourseEditFSM.waiting_for_description)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@my_courses_router.message(CourseEditFSM.waiting_for_description)
async def process_new_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_id = data.get("course_id")
    new_desc = message.text.strip()

    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        course.description = new_desc
        await session.commit()

    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()
