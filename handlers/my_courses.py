from aiogram import Router, F, types
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, Certificate, Enrollment
from db.session import async_session
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

my_courses_router = Router()

# --- –ú–æ–∏ –∫—É—Ä—Å—ã ---
@my_courses_router.message(Command("mycourses"))
@my_courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def show_my_courses(message: types.Message):
    async with async_session() as session:
        # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        result_user = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result_user.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
            return

        result = await session.execute(
            select(Enrollment)
            .options(selectinload(Enrollment.course))
            .where(Enrollment.user_id == user.id)
        )
        enrollments = result.scalars().all()

    if not enrollments:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    for enr in enrollments:
        course = enr.course
        status = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω" if enr.is_completed else f"üìÖ –î–æ {enr.end_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        text = (
            f"üìò <b>{course.title}</b>\n\n"
            f"{course.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±.\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unenroll:{course.id}")]
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
