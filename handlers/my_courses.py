from aiogram import Router, F, types
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, Certificate, async_session
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

my_courses_router = Router()

# --- –ú–æ–∏ –∫—É—Ä—Å—ã ---
@my_courses_router.message(Command("mycourses"))
@my_courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def show_my_courses(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.courses:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    for course in user.courses:
        text = (
            f"üìò <b>{course.title}</b>\n\n"
            f"{course.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unenroll:{course.id}")]
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# --- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ---
@my_courses_router.message(Command("certificates"))
@my_courses_router.message(F.text == "–ú–æ–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def show_certificates(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.certificates)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.certificates:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
        return

    for cert in user.certificates:
        await message.answer_document(cert.file_id, caption=f"üèÖ {cert.title}")
