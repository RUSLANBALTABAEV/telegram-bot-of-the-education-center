from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, async_session
from config.bot_config import ADMIN_ID

my_courses_router = Router()

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ---
class CourseEditFSM(StatesGroup):
    waiting_for_price = State()
    waiting_for_title = State()
    waiting_for_description = State()


# --- –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö / –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ ---
@my_courses_router.message(Command("mycourses"))
@my_courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def show_my_courses(message: types.Message):
    async with async_session() as session:
        if message.from_user.id == ADMIN_ID:
            result = await session.execute(select(Course))
            courses = result.scalars().all()
        else:
            result = await session.execute(
                select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            if not user:
                await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register) –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ (/login).")
                return
            courses = user.courses

    if not courses:
        await message.answer("üì≠ –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìò –í–∞—à–∏ –∫—É—Ä—Å—ã:" if message.from_user.id != ADMIN_ID else "üìò –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.title, callback_data=f"mycourse:{course.id}")]
            for course in courses
        ]
    )
    await message.answer(text, reply_markup=keyboard)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ ---
@my_courses_router.callback_query(F.data.startswith("mycourse:"))
async def my_course_info(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        course = await session.get(Course, course_id)

    if not course:
        await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = (
        f"üìò <b>{course.title}</b>\n\n"
        f"{course.description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±."
    )

    keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_mycourses")]]

    if callback.from_user.id == ADMIN_ID:
        keyboard.insert(
            0,
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title:{course.id}"),
                InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc:{course.id}"),
            ]
        )
        keyboard.insert(
            1,
            [
                InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"edit_price:{course.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delcourse:{course.id}"),
            ]
        )
    else:
        # –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø–∏—Å–∫–∏
        if user and course in user.courses:
            keyboard.insert(0, [InlineKeyboardButton(text="üö™ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unenroll_my:{course.id}")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )


# --- –û—Ç–ø–∏—Å–∫–∞ –∏–∑ –º–æ–∏—Ö –∫—É—Ä—Å–æ–≤ ---
@my_courses_router.callback_query(F.data.startswith("unenroll_my:"))
async def unenroll_my_course(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        course = await session.get(Course, course_id)

        if not user or not course:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        if course not in user.courses:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.", show_alert=True)
        else:
            user.courses.remove(course)
            session.add(user)
            await session.commit()
            await callback.message.edit_text(f"üö™ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞ ¬´{course.title}¬ª.")
