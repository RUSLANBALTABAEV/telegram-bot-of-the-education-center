from aiogram import Router, F, types
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, Certificate, async_session
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.bot_config import ADMIN_ID

my_courses_router = Router()

# --- –ú–æ–∏ –∫—É—Ä—Å—ã ---
@my_courses_router.message(Command("mycourses"))
@my_courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def show_my_courses(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.courses:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    for course in user.courses:
        text = (
            f"üìò <b>{course.title}</b>\n\n"
            f"{course.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unenroll:{course.id}")]
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# --- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∞–¥–º–∏–Ω–∞ (–≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã) ---
@my_courses_router.message(F.text == "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def show_all_certificates(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    async with async_session() as session:
        result = await session.execute(select(Certificate).options(selectinload(Certificate.user)))
        certificates = result.scalars().all()

    if not certificates:
        await message.answer("üì≠ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for cert in certificates:
        caption = f"üèÖ {cert.title} ‚Äî {cert.user.name} ({cert.user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'})"
        await message.answer_document(cert.file_id, caption=caption)


# --- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–≤–æ–∏) ---
@my_courses_router.message(F.text == "–ú–æ–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def show_user_certificates(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.certificates)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.certificates:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
        return

    for cert in user.certificates:
        await message.answer_document(cert.file_id, caption=f"üèÖ {cert.title}")
