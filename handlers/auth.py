from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from db.models import User
from db.session import async_session
from fsm.auth import Auth

auth_router = Router()


# --- –í—Ö–æ–¥ ---
@auth_router.message(Command("login"))
@auth_router.message(F.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def start_auth(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if user:
        await message.answer("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766):")
        await state.set_state(Auth.phone)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@auth_router.message(Auth.phone, F.text.regexp(r"^\+?\d{10,15}$"))
async def process_phone_auth(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.phone == message.text)
        )
        user = result.scalar_one_or_none()

        if user:
            if user.user_id:  # —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                user.user_id = message.from_user.id
                session.add(user)
                await session.commit()
                await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /register.")

    await state.clear()


# --- –í—ã—Ö–æ–¥ ---
@auth_router.message(Command("logout"))
@auth_router.message(F.text == "–í—ã—Ö–æ–¥")
async def logout(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if user:
            user.user_id = None   # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å NULL
            session.add(user)
            await session.commit()
            await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        else:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
