from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from db.models import User, Course
from db.session import async_session
from fsm.courses import CourseFSM

courses_router = Router()


# --- –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ ---
@courses_router.message(Command("courses"))
@courses_router.message(F.text == "–ö—É—Ä—Å—ã")
async def show_courses(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        await message.answer("üìö –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
    for course in courses:
        text += f"‚ñ´Ô∏è {course.title} ‚Äî {course.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å: {course.price} —Ä—É–±.\n\n"

    text += "\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞."
    await message.answer(text)
    await state.set_state(CourseFSM.choosing_course)


# --- –ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å ---
@courses_router.message(CourseFSM.choosing_course, F.text)
async def enroll_course(message: types.Message, state: FSMContext):
    course_name = message.text.strip()

    async with async_session() as session:
        result = await session.execute(select(Course).where(Course.title == course_name))
        course = result.scalar_one_or_none()

        if not course:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/register).")
            await state.clear()
            return

        if course in user.courses:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.")
        else:
            user.courses.append(course)
            session.add(user)
            await session.commit()
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å ¬´{course.title}¬ª!")

    await state.clear()


# --- –ú–æ–∏ –∫—É—Ä—Å—ã ---
@courses_router.message(Command("mycourses"))
@courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def my_courses(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.courses:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã.")
        return

    text = "üìö –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å—ã:\n\n"
    for course in user.courses:
        text += f"‚ñ´Ô∏è {course.title}\n"

    text += "\n–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫—É—Ä—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    await message.answer(text)
    await state.set_state(CourseFSM.unsubscribe_course)


# --- –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞ ---
@courses_router.message(CourseFSM.unsubscribe_course, F.text)
async def unsubscribe_one(message: types.Message, state: FSMContext):
    course_name = message.text.strip()

    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register).")
            await state.clear()
            return

        course_to_remove = next((c for c in user.courses if c.title == course_name), None)

        if not course_to_remove:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.")
        else:
            user.courses.remove(course_to_remove)
            session.add(user)
            await session.commit()
            await message.answer(f"üö™ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞ ¬´{course_to_remove.title}¬ª.")

    await state.clear()
