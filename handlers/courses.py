from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, async_session
from fsm.courses import CourseFSM

courses_router = Router()

@courses_router.message(Command("courses"))
@courses_router.message(F.text == "–ö—É—Ä—Å—ã")
async def show_courses(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        await message.answer("üìö –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
    for course in courses:
        text += f"‚ñ´Ô∏è {course.title} ‚Äî {course.description}\nüí≤ {course.price} —Ä—É–±.\n\n"

    text += "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏."
    await message.answer(text)
    await state.set_state(CourseFSM.choosing_course)


@courses_router.message(CourseFSM.choosing_course, F.text)
async def enroll_course(message: types.Message, state: FSMContext):
    course_name = message.text.strip()
    async with async_session() as session:
        result = await session.execute(select(Course).where(Course.title == course_name))
        course = result.scalar_one_or_none()

        if not course:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç.")
            return

        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register).")
        elif course in user.courses:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")
        else:
            user.courses.append(course)
            session.add(user)
            await session.commit()
            await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å ¬´{course.title}¬ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    await state.clear()


@courses_router.message(Command("mycourses"))
@courses_router.message(F.text == "–ú–æ–∏ –∫—É—Ä—Å—ã")
async def my_courses(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if not user or not user.courses:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    text = "üìö –í–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
    for course in user.courses:
        text += f"‚ñ´Ô∏è {course.title}\n"

    text += "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
    await message.answer(text)
    await state.set_state(CourseFSM.unsubscribe_course)


@courses_router.message(CourseFSM.unsubscribe_course, F.text)
async def unsubscribe_course(message: types.Message, state: FSMContext):
    course_name = message.text.strip()
    async with async_session() as session:
        result = await session.execute(
            select(User).options(selectinload(User.courses)).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return

        course_to_remove = next((c for c in user.courses if c.title == course_name), None)
        if not course_to_remove:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.")
        else:
            user.courses.remove(course_to_remove)
            session.add(user)
            await session.commit()
            await message.answer(f"üö™ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞ ¬´{course_to_remove.title}¬ª.")

    await state.clear()
