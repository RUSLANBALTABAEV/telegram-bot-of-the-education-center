from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, Enrollment
from db.session import async_session
from datetime import date

courses_router = Router()


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
async def build_courses_message():
    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        return "üìö –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", None

    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.title, callback_data=f"course:{course.id}")]
            for course in courses
        ]
    )
    return text, keyboard


# –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
@courses_router.message(Command("courses"))
@courses_router.message(F.text == "–ö—É—Ä—Å—ã")
async def show_courses(message: Message):
    text, keyboard = await build_courses_message()
    if not keyboard:
        await message.answer(text)
    else:
        await message.answer(text, reply_markup=keyboard)


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
@courses_router.callback_query(F.data.startswith("course:"))
async def show_course_info(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result_user = await session.execute(
            select(User).where(User.user_id == callback.from_user.id)
        )
        user = result_user.scalar_one_or_none()

        enrollment = None
        if user:
            result = await session.execute(
                select(Enrollment)
                .options(selectinload(Enrollment.course))
                .where(Enrollment.user_id == user.id, Enrollment.course_id == course_id)
            )
            enrollment = result.scalar_one_or_none()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞
    text = (
        f"üìò <b>{course.title}</b>\n\n"
        f"{course.description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±.\n"
        f"üìÖ –î–∞—Ç—ã: {course.start_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Äî {course.end_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
    )

    # –ö–Ω–æ–ø–∫–∏
    if enrollment:
        status = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω" if enrollment.is_completed else f"üìÖ –î–æ {enrollment.end_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        text += f"\n\n–°—Ç–∞—Ç—É—Å: {status}"
        action_button = InlineKeyboardButton(text="üö™ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unenroll:{course.id}")
    else:
        action_button = InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"enroll:{course.id}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [action_button],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_courses")]
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# –ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å
@courses_router.callback_query(F.data.startswith("enroll:"))
async def enroll_course(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        if not user:
            await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register).", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
        existing = await session.execute(
            select(Enrollment).where(Enrollment.user_id == user.id, Enrollment.course_id == course_id)
        )
        if existing.scalar_one_or_none():
            await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã.", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –∫—É—Ä—Å–∞
        enrollment = Enrollment(
            user_id=user.id,
            course_id=course.id,
            start_date=course.start_date or date.today(),
            end_date=course.end_date,
            is_completed=False
        )
        session.add(enrollment)
        await session.commit()

    await callback.message.edit_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å ¬´{course.title}¬ª!")


# –û—Ç–ø–∏—Å–∫–∞
@courses_router.callback_query(F.data.startswith("unenroll:"))
async def unenroll_course(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        result = await session.execute(select(User).where(User.user_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        if not user:
            await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register).", show_alert=True)
            return

        enrollment_q = await session.execute(
            select(Enrollment).where(Enrollment.user_id == user.id, Enrollment.course_id == course_id)
        )
        enrollment = enrollment_q.scalar_one_or_none()
        if not enrollment:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.", show_alert=True)
            return

        await session.delete(enrollment)
        await session.commit()

    await callback.message.edit_text("üö™ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞.")


# –ù–∞–∑–∞–¥
@courses_router.callback_query(F.data == "back_to_courses")
async def back_to_courses(callback: CallbackQuery):
    text, keyboard = await build_courses_message()
    if not keyboard:
        await callback.message.edit_text(text)
    else:
        await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
