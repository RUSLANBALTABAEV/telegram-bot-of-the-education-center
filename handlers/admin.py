"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞.
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∫—É—Ä—Å–∞–º–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏.
"""
from datetime import datetime

from aiogram import Router, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message
)
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from db.models import User, Course, Certificate
from db.session import async_session
from config.bot_config import ADMIN_ID
from keyboards.reply import admin_main_keyboard, admin_back_keyboard
from i18n.locales import get_text, MIN_CERTIFICATE_TITLE_LENGTH

admin_router = Router()


async def get_user_language(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–æ–¥ —è–∑—ã–∫–∞ (ru/en/uz), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'
    """
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = result.scalar_one_or_none()
        return user.language if user and user.language else "ru"


# ============ FSM –∫–ª–∞—Å—Å—ã ============
class AddCourseFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞."""
    title = State()
    description = State()
    price = State()
    start_date = State()
    end_date = State()


class EditCourseFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."""
    course_id = State()
    title = State()
    description = State()
    price = State()
    start_date = State()
    end_date = State()


class CertificateFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    user_selector = State()
    title = State()
    file = State()


# ============ –ê–¥–º–∏–Ω-–º–µ–Ω—é ============
@admin_router.message(
    F.text.in_([
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "Manage Courses and Users",
        "Kurs va foydalanuvchilarni boshqarish"
    ])
)
async def admin_main_menu(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if message.from_user.id != ADMIN_ID:
        lang = await get_user_language(message.from_user.id)
        await message.answer(get_text("no_access", lang))
        return
    
    lang = await get_user_language(message.from_user.id)
    await message.answer(
        get_text("admin_main_menu", lang),
        reply_markup=admin_main_keyboard(lang)
    )


@admin_router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.clear()
    
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return
    
    lang = await get_user_language(callback.from_user.id)
    
    try:
        await callback.message.edit_text(
            get_text("admin_main_menu", lang),
            reply_markup=admin_main_keyboard(lang)
        )
    except Exception:
        await callback.message.answer(
            get_text("admin_main_menu", lang),
            reply_markup=admin_main_keyboard(lang)
        )
    
    await callback.answer()


# ============ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ============
@admin_router.callback_query(F.data == "show_users")
async def show_users(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        callback: Callback query
    """
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return

    lang = await get_user_language(callback.from_user.id)
    
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        try:
            await callback.message.edit_text(
                get_text("no_users", lang),
                reply_markup=admin_back_keyboard(lang)
            )
        except Exception:
            await callback.message.answer(
                get_text("no_users", lang),
                reply_markup=admin_back_keyboard(lang)
            )
        await callback.answer()
        return

    for user in users:
        user_name = user.name or get_text("without_name", lang)
        phone = user.phone or get_text("not_specified", lang)
        text = (
            f"üë§ {user_name}\n"
            f"üÜî Telegram ID: {user.user_id}\n"
            f"üóÑ DB ID: {user.id}\n"
            f"üì± {phone}"
        )
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=get_text("btn_delete", lang),
                        callback_data=f"delete_user:{user.id}"
                    )
                ]
            ]
        )

        try:
            if user.photo:
                await callback.message.answer_photo(
                    photo=user.photo,
                    caption=text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(text, reply_markup=keyboard)
        except Exception:
            error_text = text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."
            await callback.message.answer(
                error_text,
                reply_markup=keyboard
            )

    await callback.message.answer(
        get_text("btn_admin_back", lang),
        reply_markup=admin_back_keyboard(lang)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("delete_user:"))
async def delete_user(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback: Callback query —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return

    lang = await get_user_language(callback.from_user.id)
    user_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await callback.answer(
                get_text("user_not_found", lang),
                show_alert=True
            )
            return

        username = user.name or get_text("without_name", lang)
        telegram_id = user.user_id or get_text("unknown", lang)

        await session.delete(user)
        await session.commit()

    try:
        message_text = get_text(
            "user_deleted",
            lang,
            name=username,
            telegram_id=telegram_id
        )
        await callback.message.answer(
            message_text,
            reply_markup=admin_back_keyboard(lang)
        )
        await callback.message.delete()
    except Exception:
        message_text = get_text(
            "user_deleted",
            lang,
            name=username,
            telegram_id=telegram_id
        )
        await callback.answer(message_text, show_alert=True)

    await callback.answer()


@admin_router.callback_query(F.data == "delete_all_users")
async def delete_all_users(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        callback: Callback query
    """
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return

    lang = await get_user_language(callback.from_user.id)

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        if not users:
            await callback.answer(
                get_text("no_users_to_delete", lang),
                show_alert=True
            )
            return

        for user in users:
            await session.delete(user)
        await session.commit()

    try:
        await callback.message.answer(
            get_text("all_users_deleted", lang),
            reply_markup=admin_back_keyboard(lang)
        )
        await callback.message.delete()
    except Exception:
        await callback.answer(
            get_text("all_users_deleted", lang),
            show_alert=True
        )

    await callback.answer()

# ============ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ============
@admin_router.callback_query(F.data.startswith("edit_course:"))
async def edit_course_start(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞.
    
    Args:
        callback: Callback query —Å ID –∫—É—Ä—Å–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return

    lang = await get_user_language(callback.from_user.id)
    course_id = int(callback.data.split(":")[1])
    
    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer(
                get_text("course_not_found", lang),
                show_alert=True
            )
            return

    await state.update_data(course_id=course_id)
    await state.set_state(EditCourseFSM.title)
    
    edit_text = (
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–µ–∫—É—â–µ–µ: {course.title}):"
    )
    
    try:
        await callback.message.edit_text(edit_text)
    except Exception:
        await callback.message.answer(edit_text)
    
    await callback.answer()


@admin_router.message(EditCourseFSM.title)
async def edit_course_title(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    await state.update_data(new_title=message.text.strip())
    await state.set_state(EditCourseFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@admin_router.message(EditCourseFSM.description)
async def edit_course_description(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    await state.update_data(new_description=message.text.strip())
    await state.set_state(EditCourseFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∫—É—Ä—Å–∞:")


@admin_router.message(EditCourseFSM.price, F.text.regexp(r"^\d+$"))
async def edit_course_price(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –∫—É—Ä—Å–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    await state.update_data(new_price=int(message.text.strip()))
    await state.set_state(EditCourseFSM.start_date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
    )


@admin_router.message(EditCourseFSM.start_date)
async def edit_course_start_date(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    
    try:
        start_date = datetime.strptime(
            message.text.strip(),
            "%d.%m.%Y"
        ).date()
    except ValueError:
        await message.answer(get_text("invalid_date_format", lang))
        return
    
    await state.update_data(new_start_date=start_date)
    await state.set_state(EditCourseFSM.end_date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
    )


@admin_router.message(EditCourseFSM.end_date)
async def edit_course_end_date(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    data = await state.get_data()
    
    try:
        end_date = datetime.strptime(
            message.text.strip(),
            "%d.%m.%Y"
        ).date()
    except ValueError:
        await message.answer(get_text("invalid_date_format", lang))
        return

    if end_date < data["new_start_date"]:
        await message.answer(get_text("end_date_before_start", lang))
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    course_id = data["course_id"]
    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await message.answer(get_text("course_not_found", lang))
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        result = await session.execute(
            select(Course).where(
                Course.title == data["new_title"],
                Course.id != course_id
            )
        )
        existing_course = result.scalar_one_or_none()
        
        if existing_course:
            await message.answer(get_text("course_title_exists", lang))
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        course.title = data["new_title"]
        course.description = data["new_description"]
        course.price = data["new_price"]
        course.start_date = data["new_start_date"]
        course.end_date = end_date
        
        await session.commit()

    await message.answer(
        f"‚úÖ –ö—É—Ä—Å ¬´{data['new_title']}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=admin_back_keyboard(lang)
    )
    await state.clear()


# ============ –í—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ============
@admin_router.callback_query(F.data == "add_certificate")
async def add_certificate_start(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    
    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if callback.from_user.id != ADMIN_ID:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text("no_access", lang), show_alert=True)
        return

    lang = await get_user_language(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        await callback.answer(
            get_text("no_users", lang),
            show_alert=True
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=(
                        f"{user.name or 'ID: ' + str(user.id)} "
                        f"({user.phone or '–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'})"
                    ),
                    callback_data=f"cert_user:{user.id}"
                )
            ]
            for user in users
        ] + [
            [
                InlineKeyboardButton(
                    text=get_text("btn_back", lang),
                    callback_data="admin_menu"
                )
            ]
        ]
    )

    try:
        await callback.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:",
            reply_markup=keyboard
        )
    except Exception:
        await callback.message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:",
            reply_markup=keyboard
        )
    
    await state.set_state(CertificateFSM.user_selector)
    await callback.answer()


@admin_router.callback_query(
    F.data.startswith("cert_user:"),
    CertificateFSM.user_selector
)
async def certificate_user_selected(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    
    Args:
        callback: Callback query —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if callback.from_user.id != ADMIN_ID:
        return

    lang = await get_user_language(callback.from_user.id)
    user_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(selected_user_id=user_id)
    await state.set_state(CertificateFSM.title)
    
    try:
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"
        )
    except Exception:
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"
        )
    
    await callback.answer()


@admin_router.message(CertificateFSM.title)
async def certificate_title_entered(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    lang = await get_user_language(message.from_user.id)
    title = message.text.strip()
    
    if len(title) < MIN_CERTIFICATE_TITLE_LENGTH:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        )
        return
    
    await state.update_data(certificate_title=title)
    await state.set_state(CertificateFSM.file)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ë–µ–∑ —Ñ–∞–π–ª–∞",
                    callback_data="cert_no_file"
                )
            ]
        ]
    )
    
    await message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç) "
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ñ–∞–π–ª–∞' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑ —Ñ–∞–π–ª–∞:",
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data == "cert_no_file", CertificateFSM.file)
async def certificate_no_file(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑ —Ñ–∞–π–ª–∞.
    
    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if callback.from_user.id != ADMIN_ID:
        return

    await create_certificate(callback.message, state, file_id=None)
    await callback.answer()


@admin_router.message(
    CertificateFSM.file,
    F.content_type == ContentType.DOCUMENT
)
async def certificate_file_received(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
        
    await create_certificate(
        message,
        state,
        file_id=message.document.file_id
    )


async def create_certificate(
    message: Message,
    state: FSMContext,
    file_id: str = None
) -> None:
    """
    –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        file_id: File ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    lang = await get_user_language(message.from_user.id)
    data = await state.get_data()
    
    user_id = data.get("selected_user_id")
    title = data.get("certificate_title")
    
    if not user_id or not title:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        return

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        certificate = Certificate(
            user_id=user_id,
            title=title,
            file_id=file_id
        )
        
        session.add(certificate)
        await session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.user_id:
            try:
                user_lang = user.language or "ru"
                notification_text = (
                    f"üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:\n\n"
                    f"<b>{title}</b>"
                )
                
                await message.bot.send_message(
                    user.user_id,
                    notification_text,
                    parse_mode="HTML"
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if file_id:
                    try:
                        await message.bot.send_document(
                            user.user_id,
                            file_id,
                            caption="üìÑ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
                        )
                    except Exception as e:
                        print(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}"
                        )
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    confirmation_text = (
        f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ¬´{title}¬ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
        f"{user.name or 'ID: ' + str(user.id)}"
    )
    if file_id:
        confirmation_text += " —Å —Ñ–∞–π–ª–æ–º"
    
    await message.answer(
        confirmation_text,
        reply_markup=admin_back_keyboard(lang)
    )
    await state.clear()


# ============ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ============
@admin_router.message(AddCourseFSM.price)
async def invalid_add_price(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
    
    lang = await get_user_language(message.from_user.id)
    await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


@admin_router.message(EditCourseFSM.price)
async def invalid_edit_price(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—É—Ä—Å–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
    
    lang = await get_user_language(message.from_user.id)
    await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


@admin_router.message(CertificateFSM.file)
async def invalid_certificate_file(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ñ–∞–π–ª–∞'"
    )
