from aiogram import Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from db.models import User, Course, Certificate
from db.session import async_session
from config.bot_config import ADMIN_ID
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

admin_router = Router()


# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ---
class AddCourseFSM(StatesGroup):
    title = State()
    description = State()
    price = State()


# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ ---
class EditCourseFSM(StatesGroup):
    course_id = State()
    title = State()
    description = State()
    price = State()


# --- FSM –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
class CertificateFSM(StatesGroup):
    tg_user_id = State()
    title = State()
    file = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ ---
def admin_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users")],
            [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", callback_data="manage_courses")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="add_course")],
            [InlineKeyboardButton(text="üèÖ –í—ã–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="add_certificate")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="delete_all_users")],  # ‚úÖ
        ]
    )


def admin_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_menu")]]
    )


# --- –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@admin_router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def admin_main_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_keyboard())


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@admin_router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback.message.edit_text("üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_keyboard())
    await callback.answer()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@admin_router.callback_query(F.data == "show_users")
async def show_users(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        await callback.message.edit_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_back_keyboard())
        await callback.answer()
        return

    for user in users:
        text = f"üë§ {user.name} ({user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\nüÜî Telegram ID: {user.user_id}"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user:{user.id}")]
            ]
        )
        await callback.message.answer(text, reply_markup=keyboard)

        if user.photo:
            await callback.message.answer_photo(user.photo, caption="–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        if user.document:
            try:
                await callback.message.answer_document(user.document, caption="–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception:
                await callback.message.answer("‚ö†Ô∏è –í –ø–æ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")

    await callback.message.answer(
        "‚¨ÜÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=admin_back_keyboard()
    )
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@admin_router.callback_query(F.data.startswith("delete_user:"))
async def delete_user(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    user_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        await session.delete(user)
        await session.commit()

    await callback.message.edit_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´{user.name}¬ª —É–¥–∞–ª—ë–Ω.")
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@admin_router.callback_query(F.data == "delete_all_users")
async def delete_all_users(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        if not users:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", show_alert=True)
            return

        for user in users:
            await session.delete(user)
        await session.commit()

    await callback.message.edit_text("üóë –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=admin_back_keyboard())
    await callback.answer()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ ---
@admin_router.callback_query(F.data == "manage_courses")
async def manage_courses(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        await callback.message.edit_text("üìö –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_back_keyboard())
        await callback.answer()
        return

    text = "üìö –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω):"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.title, callback_data=f"course_admin:{course.id}")]
            for course in courses
        ] + [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# --- –ú–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ ---
@admin_router.callback_query(F.data.startswith("course_admin:"))
async def course_admin_menu(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        course = await session.get(Course, course_id)

    if not course:
        await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = (
        f"üìò <b>{course.title}</b>\n\n"
        f"{course.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {course.price} —Ä—É–±.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_course:{course.id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_course:{course.id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_courses")]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ---
@admin_router.callback_query(F.data.startswith("delete_course:"))
async def delete_course(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        await session.delete(course)
        await session.commit()

    await callback.message.edit_text(f"üóë –ö—É—Ä—Å ¬´{course.title}¬ª —É–¥–∞–ª—ë–Ω.", reply_markup=admin_back_keyboard())
    await callback.answer()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ---
@admin_router.callback_query(F.data.startswith("edit_course:"))
async def edit_course_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    await state.set_state(EditCourseFSM.title)
    await state.update_data(course_id=course_id)

    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await callback.answer()


@admin_router.message(EditCourseFSM.title)
async def edit_course_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(EditCourseFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@admin_router.message(EditCourseFSM.description)
async def edit_course_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(EditCourseFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ):")


@admin_router.message(EditCourseFSM.price, F.text.regexp(r"^\d+$"))
async def edit_course_price(message: Message, state: FSMContext):
    data = await state.get_data()
    new_price = int(message.text.strip())

    async with async_session() as session:
        course = await session.get(Course, data["course_id"])
        if not course:
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        course.title = data["title"]
        course.description = data["description"]
        course.price = new_price

        try:
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await state.clear()
            return

    await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {course.title} ({new_price} —Ä—É–±.)")
    await state.clear()


@admin_router.message(EditCourseFSM.price)
async def edit_course_price_invalid(message: Message):
    await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ---
@admin_router.callback_query(F.data == "add_course")
async def add_course_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await state.set_state(AddCourseFSM.title)
    await callback.message.edit_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")
    await callback.answer()


@admin_router.message(AddCourseFSM.title)
async def add_course_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(AddCourseFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@admin_router.message(AddCourseFSM.description)
async def add_course_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AddCourseFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ):")


@admin_router.message(AddCourseFSM.price, F.text.regexp(r"^\d+$"))
async def add_course_price(message: Message, state: FSMContext):
    data = await state.get_data()
    price = int(message.text.strip())

    async with async_session() as session:
        new_course = Course(
            title=data["title"],
            description=data["description"],
            price=price
        )
        try:
            session.add(new_course)
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await state.clear()
            return

    await message.answer(
        f"‚úÖ –ö—É—Ä—Å ¬´{data['title']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω (—Ü–µ–Ω–∞: {price} —Ä—É–±.)",
        reply_markup=admin_back_keyboard()
    )
    await state.clear()


@admin_router.message(AddCourseFSM.price)
async def add_course_price_invalid(message: Message):
    await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")


# --- –í—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
@admin_router.callback_query(F.data == "add_certificate")
async def add_certificate_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await state.set_state(CertificateFSM.tg_user_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–≥–æ user_id):")
    await callback.answer()


@admin_router.message(CertificateFSM.tg_user_id, F.text.regexp(r"^\d+$"))
async def add_certificate_user(message: Message, state: FSMContext):
    tg_id = int(message.text.strip())

    async with async_session() as session:
        result = await session.execute(select(User).where(User.user_id == tg_id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

    await state.update_data(user_db_id=user.id)
    await state.set_state(CertificateFSM.title)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:")


@admin_router.message(CertificateFSM.title)
async def add_certificate_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(CertificateFSM.file)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")


@admin_router.message(CertificateFSM.file, F.document)
async def add_certificate_file(message: Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()

    async with async_session() as session:
        new_cert = Certificate(
            title=data["title"],
            file_id=file_id,
            user_id=data["user_db_id"]   # –∏–º–µ–Ω–Ω–æ ID –∏–∑ –ë–î!
        )
        session.add(new_cert)
        await session.commit()

    await message.answer(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ¬´{data['title']}¬ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {data['user_db_id']}.")
    await state.clear()
