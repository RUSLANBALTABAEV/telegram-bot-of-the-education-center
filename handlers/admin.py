from aiogram import Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import User, Course, async_session
from config.bot_config import ADMIN_ID

admin_router = Router()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ---
@admin_router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def admin_main_menu(message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", callback_data="manage_courses")]
        ]
    )
    await message.answer("üë§ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


# --- Callback: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@admin_router.callback_query(F.data == "show_users")
async def show_users(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(User).options(selectinload(User.courses)))
        users = result.scalars().all()

    if not users:
        await callback.message.edit_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        await callback.answer()
        return

    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for u in users:
        text += f"‚Ä¢ {u.name} ({u.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# --- Callback: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ ---
@admin_router.callback_query(F.data == "manage_courses")
async def manage_courses(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        await callback.message.edit_text("üì≠ –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        await callback.answer()
        return

    for c in courses:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_course:{c.id}"),
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_course:{c.id}")
                ]
            ]
        )
        await callback.message.answer(
            f"üìò {c.title}\nüí∞ {c.price} —Ä—É–±.\n{c.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
            reply_markup=keyboard
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    keyboard_back = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
    )
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞:", reply_markup=keyboard_back)
    await callback.answer()


# --- Callback –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é ---
@admin_router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", callback_data="manage_courses")]
        ]
    )
    await callback.message.edit_text("üë§ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    await callback.answer()


# --- Callback —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ---
@admin_router.callback_query(F.data.startswith("delete_course:"))
async def delete_course(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    course_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        course = await session.get(Course, course_id)
        if course:
            await session.delete(course)
            await session.commit()
            await callback.message.edit_text(f"üóë –ö—É—Ä—Å ¬´{course.title}¬ª —É–¥–∞–ª—ë–Ω.")
        else:
            await callback.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
