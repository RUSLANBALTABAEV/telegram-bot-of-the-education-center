from aiogram import Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from db.models import User, Course, async_session
from config.bot_config import ADMIN_ID
from fsm.courses import CourseFSM

admin_router = Router()


# --- –ö–Ω–æ–ø–∫–∏ ---
def admin_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", callback_data="manage_courses")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="add_course")],
        ]
    )


def admin_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_menu")]]
    )


def manage_courses_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="add_course")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")],
        ]
    )


# --- –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é ---
@admin_router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def admin_main_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üë§ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_keyboard())


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@admin_router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await state.clear()
    await callback.message.edit_text("üë§ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_keyboard())
    await callback.answer()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@admin_router.callback_query(F.data == "show_users")
async def show_users(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        await callback.message.edit_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_back_keyboard())
        await callback.answer()
        return

    # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º‚Ä¶
    await callback.message.edit_text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    # ‚Ä¶–∞ –∑–∞–ø–∏—Å–∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
    for user in users:
        text = f"üë§ {user.name} ({user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'})"
        await callback.message.answer(text)

        if user.photo:
            await callback.message.answer_photo(user.photo, caption="–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        if user.document:
            try:
                await callback.message.answer_document(user.document, caption="–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception:
                await callback.message.answer("‚ö†Ô∏è –í –ø–æ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")

    await callback.message.answer(
        "‚¨ÜÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=admin_back_keyboard(),
    )
    await callback.answer()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ (—Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤) ---
@admin_router.callback_query(F.data == "manage_courses")
async def manage_courses(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(Course))
        courses = result.scalars().all()

    if not courses:
        text = "üìö –ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        lines = ["üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:"]
        for c in courses:
            lines.append(f"‚Ä¢ {c.title} ‚Äî {c.price} —Ä—É–±.")
        text = "\n".join(lines)

    await callback.message.edit_text(
        f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=manage_courses_keyboard(),
    )
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: —Å—Ç–∞—Ä—Ç ---
@admin_router.callback_query(F.data == "add_course")
async def add_course_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await state.set_state(CourseFSM.title)
    await callback.message.edit_text("üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ ---
@admin_router.message(CourseFSM.title)
async def add_course_title(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return

    title = message.text.strip()
    if len(title) < 2:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return

    await state.update_data(title=title)
    await state.set_state(CourseFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤):")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –æ–ø–∏—Å–∞–Ω–∏–µ ---
@admin_router.message(CourseFSM.description)
async def add_course_description(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return

    desc = (message.text or "").strip()
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∂–µ–º –¥–æ –¥–ª–∏–Ω—ã –ø–æ–ª—è –≤ –ë–î
    if len(desc) > 255:
        desc = desc[:255]

    await state.update_data(description=desc)
    await state.set_state(CourseFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: —Ü–µ–Ω–∞ (–≤–∞–ª–∏–¥–Ω–∞—è)---
@admin_router.message(CourseFSM.price, F.text.regexp(r"^\d+$"))
async def add_course_price_ok(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return

    price = int(message.text)
    data = await state.get_data()

    async with async_session() as session:
        course = Course(
            title=data["title"],
            description=data.get("description") or None,
            price=price,
        )
        session.add(course)
        try:
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.clear()
            return

    await message.answer(f"‚úÖ –ö—É—Ä—Å ¬´{data['title']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.")
    await state.clear()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: —Ü–µ–Ω–∞ (–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è)---
@admin_router.message(CourseFSM.price)
async def add_course_price_invalid(message: Message):
    await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
