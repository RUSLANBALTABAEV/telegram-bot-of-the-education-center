from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from db.models import User
from db.session import async_session
from fsm.registration import Registration
from config.bot_config import ADMIN_ID
from keyboards.reply import main_menu

registration_router = Router()

@registration_router.message(Command("register"))
@registration_router.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.user_id == message.from_user.id))
        user = result.scalar_one_or_none()

    if user:
        await message.answer(f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\nüë§ –ò–º—è: {user.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        await state.clear()
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Registration.name)

@registration_router.message(Registration.name, F.text.len() >= 2)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")
    await state.set_state(Registration.age)

@registration_router.message(Registration.age, F.text.regexp(r"^\d{1,3}$"))
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if not (1 <= age <= 120):
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1‚Äì120). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(age=age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.phone)

@registration_router.message(Registration.phone, F.text.regexp(r"^\+?\d{10,15}$"))
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    async with async_session() as session:
        result = await session.execute(select(User).where(User.phone == phone))
        phone_owner = result.scalar_one_or_none()

    if phone_owner:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await state.clear()
        return

    await state.update_data(phone=phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ —Ñ–∞–π–ª–æ–º):")
    await state.set_state(Registration.photo)

@registration_router.message(Registration.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª):")
    await state.set_state(Registration.document)

@registration_router.message(Registration.document, F.content_type == ContentType.DOCUMENT)
async def process_document(message: types.Message, state: FSMContext):
    bot = message.bot
    mime = message.document.mime_type or ""
    if not (mime.startswith("application/pdf") or mime.startswith("image/")):
        await message.answer("‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG/JPEG/PNG).")
        return

    await state.update_data(document=message.document.file_id)
    data = await state.get_data()

    new_user = User(
        user_id=message.from_user.id,
        name=data["name"],
        age=data["age"],
        phone=data["phone"],
        photo=data["photo"],
        document=data["document"],
    )

    async with async_session() as session:
        try:
            session.add(new_user)
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    notify_text = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_user.name}, –¢–µ–ª–µ—Ñ–æ–Ω: {new_user.phone}, TG ID: {new_user.user_id}"
    try:
        await bot.send_message(ADMIN_ID, notify_text)
        if new_user.photo:
            await bot.send_photo(ADMIN_ID, new_user.photo, caption="üì∑ –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if new_user.document:
            await bot.send_document(ADMIN_ID, new_user.document, caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu(message.from_user.id))
    await state.clear()
