from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from db.models import User
from db.session import async_session
from fsm.registration import Registration
from config.bot_config import ADMIN_ID
from keyboards.reply import main_menu

registration_router = Router()



@registration_router.message(Command("register"))
@registration_router.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    print(f"üëâ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç {message.from_user.id} ({message.from_user.full_name})")

    async with async_session() as session:
        
        result_count = await session.execute(select(User))
        total_users = len(result_count.scalars().all())

        if total_users >= 100:
            await message.answer(
                "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).\n"
                "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            )
            return

        
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

    if user:
        await message.answer(
            f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            f"üë§ –ò–º—è: {user.name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        await state.clear()
        return

    await message.answer("üëâ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Registration.name)



@registration_router.message(Registration.name, F.text.len() >= 2)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")
    await state.set_state(Registration.age)


@registration_router.message(Registration.name)
async def invalid_name(message: types.Message):
    await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")



@registration_router.message(Registration.age, F.text.regexp(r"^\d{1,3}$"))
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if not (1 <= age <= 120):
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1‚Äì120). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(age=age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766):")
    await state.set_state(Registration.phone)


@registration_router.message(Registration.age)
async def invalid_age(message: types.Message):
    await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 25")



PHONE_RE = r"^\+?\d{10,15}$"

@registration_router.message(Registration.phone, F.text.regexp(PHONE_RE))
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()

    async with async_session() as session:
        result = await session.execute(select(User).where(User.phone == phone))
        phone_owner = result.scalar_one_or_none()

    if phone_owner:
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login."
        )
        await state.clear()
        return

    await state.update_data(phone=phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ —Ñ–∞–π–ª–æ–º):")
    await state.set_state(Registration.photo)


@registration_router.message(Registration.phone)
async def invalid_phone(message: types.Message):
    await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +79998887766")



@registration_router.message(Registration.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ üìÑ –¥–æ–∫—É–º–µ–Ω—Ç (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª).")
    await state.set_state(Registration.document)


@registration_router.message(Registration.photo)
async def invalid_photo(message: types.Message):
    await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ, –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ —Å—Ç–∏–∫–µ—Ä.")



@registration_router.message(
    Registration.document,
    F.content_type == ContentType.DOCUMENT
)
async def process_document(message: types.Message, state: FSMContext, bot: Bot):
    mime = message.document.mime_type or ""
    if mime.startswith("application/pdf") or mime.startswith("image/"):
        await state.update_data(document=message.document.file_id)
    else:
        await message.answer("‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG/JPEG/PNG).")
        return

    data = await state.get_data()

    new_user = User(
        user_id=message.from_user.id,
        name=data["name"],
        age=data["age"],
        phone=data["phone"],
        photo=data["photo"],
        document=data["document"],
    )

    async with async_session() as session:
        try:
            session.add(new_user)
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
            await state.clear()
            return

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    notify_text = (
        f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–ò–º—è: {new_user.name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {new_user.age}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {new_user.phone}\n"
        f"DB id: {new_user.id}\n"
        f"TG id: {new_user.user_id}"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await bot.send_message(ADMIN_ID, notify_text)
        if new_user.photo:
            await bot.send_photo(ADMIN_ID, new_user.photo, caption="üì∑ –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if new_user.document:
            await bot.send_document(ADMIN_ID, new_user.document, caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception:
        # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º (–≤ –∫–æ–Ω—Å–æ–ª—å) –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏—è).")

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üéâ", reply_markup=main_menu(message.from_user.id))
    await state.clear()


@registration_router.message(Registration.document)
async def invalid_document(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (JPG/JPEG/PNG).")
