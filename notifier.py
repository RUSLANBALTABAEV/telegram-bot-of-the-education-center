# notifier.py
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from db.session import async_session
from db.models import Enrollment, User, Course
from loader import bot   # ‚úÖ –±–µ—Ä—ë–º bot –æ—Ç—Å—é–¥–∞

scheduler = AsyncIOScheduler(timezone="Asia/Tashkent")  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å

# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –∫—É—Ä—Å–∞
async def notify_start_course():
    today = datetime.today().date()
    async with async_session() as session:
        result = await session.execute(
            select(Enrollment).where(Enrollment.start_date == today)
        )
        enrollments = result.scalars().all()

        for enr in enrollments:
            user = await session.get(User, enr.user_id)
            course = await session.get(Course, enr.course_id)
            if user and user.user_id:
                try:
                    await bot.send_message(
                        user.user_id,
                        f"üöÄ –°–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫—É—Ä—Å: <b>{course.title}</b>!\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ üéâ",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É—Ä—Å–∞
async def notify_end_course():
    today = datetime.today().date()
    async with async_session() as session:
        result = await session.execute(
            select(Enrollment).where(Enrollment.end_date == today)
        )
        enrollments = result.scalars().all()

        for enr in enrollments:
            user = await session.get(User, enr.user_id)
            course = await session.get(Course, enr.course_id)
            if user and user.user_id:
                try:
                    await bot.send_message(
                        user.user_id,
                        f"üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫—É—Ä—Å: <b>{course.title}</b>.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ üôå",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def setup_scheduler():
    scheduler.add_job(notify_start_course, "cron", hour=9, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
    scheduler.add_job(notify_end_course, "cron", hour=9, minute=5)   # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:05
    scheduler.start()
