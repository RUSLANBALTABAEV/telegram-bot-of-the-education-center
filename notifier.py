from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from db.session import async_session
from db.models import Enrollment, User, Course
from loader import bot   # ‚úÖ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bot –æ—Ç—Å—é–¥–∞

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –Ω—É–∂–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
scheduler = AsyncIOScheduler(timezone="Asia/Tashkent")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –∫—É—Ä—Å–æ–≤
async def notify_start_course():
    today = datetime.now(scheduler.timezone).date()
    async with async_session() as session:
        result = await session.execute(
            select(Enrollment, Course, User)
            .join(Course, Enrollment.course_id == Course.id)
            .join(User, Enrollment.user_id == User.id)
            .where(Enrollment.start_date == today)
        )
        rows = result.all()

        for enr, course, user in rows:
            if user and user.user_id:
                try:
                    await bot.send_message(
                        user.user_id,
                        f"üöÄ –°–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫—É—Ä—Å: <b>{course.title}</b>!\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ üéâ",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–∞—á–∞–ª–µ –∫—É—Ä—Å–∞: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤
async def notify_end_course():
    today = datetime.now(scheduler.timezone).date()
    async with async_session() as session:
        result = await session.execute(
            select(Enrollment, Course, User)
            .join(Course, Enrollment.course_id == Course.id)
            .join(User, Enrollment.user_id == User.id)
            .where(Enrollment.end_date == today)
        )
        rows = result.all()

        for enr, course, user in rows:
            if user and user.user_id:
                try:
                    await bot.send_message(
                        user.user_id,
                        f"üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫—É—Ä—Å: <b>{course.title}</b>.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ üôå",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∫–æ–Ω—Ü–µ –∫—É—Ä—Å–∞: {e}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def setup_scheduler():
    # üîπ –î–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –∫–∞–∂–¥—ã–µ 1‚Äì2 –º–∏–Ω—É—Ç—ã
    scheduler.add_job(notify_start_course, "interval", minutes=1)
    scheduler.add_job(notify_end_course, "interval", minutes=2)

    # üîπ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ —É–±–µ—Ä–∏ interval
    # scheduler.add_job(notify_start_course, "cron", hour=9, minute=0)
    # scheduler.add_job(notify_end_course, "cron", hour=9, minute=5)

    scheduler.start()
